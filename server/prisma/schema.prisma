generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id         Int       @id @default(autoincrement())
  comment    String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  recipe_id  Int?
  user_id    Int?
  recipes    recipes?  @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model flyway_schema_history {
  installed_rank Int      @id(map: "flyway_schema_history_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "flyway_schema_history_s_idx")
}

model ingredients {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  protein            Float?
  carbohydrates      Float?
  fats               Float?
  calories           Float?
  recipe_ingredients recipe_ingredients[]
}

model ratings {
  id         Int       @id @default(autoincrement())
  stars      Float?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  recipe_id  Int?
  user_id    Int?
  recipes    recipes?  @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model recipe_ingredients {
  id            Int          @id @default(autoincrement())
  recipe_id     Int?
  ingredient_id Int?
  ingredients   ingredients? @relation(fields: [ingredient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recipes       recipes?     @relation(fields: [recipe_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model recipes {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  description        String?
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  photo              String?              @db.VarChar(255)
  user_id            Int?
  type_id            Int?
  comments           comments[]
  ratings            ratings[]
  recipe_ingredients recipe_ingredients[]
  types              types?               @relation(fields: [type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users              users?               @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model types {
  id      Int       @id @default(autoincrement())
  title   String?   @db.VarChar(255)
  recipes recipes[]
}

model users {
  id         Int        @id @default(autoincrement())
  first_name String     @db.VarChar(255)
  last_name  String?    @db.VarChar(255)
  avatar     String?    @db.VarChar(255)
  email      String     @db.VarChar(255)
  password   String     @db.VarChar(255)
  comments   comments[]
  ratings    ratings[]
  recipes    recipes[]
}
